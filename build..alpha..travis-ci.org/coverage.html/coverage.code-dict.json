{"/home/travis/build/npmtest/node-npmtest-log4js/test.js":"/* istanbul instrument in package npmtest_log4js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-log4js/lib.npmtest_log4js.js":"/* istanbul instrument in package npmtest_log4js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_log4js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_log4js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-log4js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-log4js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_log4js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_log4js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_log4js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_log4js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_log4js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_log4js.__dirname + '/lib.npmtest_log4js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/log4js.js":"\"use strict\";\n/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview log4js is a library to log in JavaScript in similar manner\n * than in log4j for Java. The API should be nearly the same.\n *\n * <h3>Example:</h3>\n * <pre>\n *  var logging = require('log4js');\n *  //add an appender that logs all messages to stdout.\n *  logging.addAppender(logging.consoleAppender());\n *  //add an appender that logs \"some-category\" to a file\n *  logging.addAppender(logging.fileAppender(\"file.log\"), \"some-category\");\n *  //get a logger\n *  var log = logging.getLogger(\"some-category\");\n *  log.setLevel(logging.levels.TRACE); //set the Level\n *\n *  ...\n *\n *  //call the log\n *  log.trace(\"trace me\" );\n * </pre>\n *\n * NOTE: the authors below are the original browser-based log4js authors\n * don't try to contact them about bugs in this version :)\n * @version 1.0\n * @author Stephan Strittmatter - http://jroller.com/page/stritti\n * @author Seth Chisamore - http://www.chisamore.com\n * @since 2005-05-20\n * @static\n * Website: http://log4js.berlios.de\n */\nvar events = require('events')\n, fs = require('fs')\n, path = require('path')\n, util = require('util')\n, layouts = require('./layouts')\n, levels = require('./levels')\n, loggerModule = require('./logger')\n, LoggingEvent = loggerModule.LoggingEvent\n, Logger = loggerModule.Logger\n, ALL_CATEGORIES = '[all]'\n, appenders = {}\n, loggers = {}\n, appenderMakers = {}\n, appenderShutdowns = {}\n, defaultConfig =   {\n  appenders: [\n    { type: \"stdout\" }\n  ],\n  replaceConsole: false\n};\n\nfunction hasLogger(logger) {\n  return loggers.hasOwnProperty(logger);\n}\n\nlevels.forName = function(levelStr, levelVal) {\n  var level;\n  if (typeof levelStr === \"string\" && typeof levelVal === \"number\") {\n    var levelUpper = levelStr.toUpperCase();\n    level = new levels.Level(levelVal, levelUpper);\n    loggerModule.addLevelMethods(level);\n  }\n  return level;\n};\n\nlevels.getLevel = function(levelStr) {\n  var level;\n  if (typeof levelStr === \"string\") {\n    var levelUpper = levelStr.toUpperCase();\n    level = levels.toLevel(levelStr);\n  }\n  return level;\n};\n\nfunction getBufferedLogger(categoryName) {\n    var base_logger = getLogger(categoryName);\n    var logger = {};\n    logger.temp = [];\n    logger.target = base_logger;\n    logger.flush = function () {\n        for (var i = 0; i < logger.temp.length; i++) {\n            var log = logger.temp[i];\n            logger.target[log.level](log.message);\n            delete logger.temp[i];\n        }\n    };\n    logger.trace = function (message) { logger.temp.push({level: 'trace', message: message}); };\n    logger.debug = function (message) { logger.temp.push({level: 'debug', message: message}); };\n    logger.info = function (message) { logger.temp.push({level: 'info', message: message}); };\n    logger.warn = function (message) { logger.temp.push({level: 'warn', message: message}); };\n    logger.error = function (message) { logger.temp.push({level: 'error', message: message}); };\n    logger.fatal = function (message) { logger.temp.push({level: 'fatal', message: message}); };\n\n    return logger;\n}\n\nfunction normalizeCategory (category) {\n  return  category + '.';\n}\n\nfunction doesLevelEntryContainsLogger (levelCategory, loggerCategory) {\n  var normalizedLevelCategory = normalizeCategory(levelCategory);\n  var normalizedLoggerCategory = normalizeCategory(loggerCategory);\n  return normalizedLoggerCategory.substring(0, normalizedLevelCategory.length) == normalizedLevelCategory; //jshint ignore:line\n}\n\nfunction doesAppenderContainsLogger (appenderCategory, loggerCategory) {\n  var normalizedAppenderCategory = normalizeCategory(appenderCategory);\n  var normalizedLoggerCategory = normalizeCategory(loggerCategory);\n  return normalizedLoggerCategory.substring(0, normalizedAppenderCategory.length) == normalizedAppenderCategory; //jshint ignore:line\n}\n\n\n/**\n * Get a logger instance. Instance is cached on categoryName level.\n * @param  {String} categoryName name of category to log to.\n * @return {Logger} instance of logger for the category\n * @static\n */\nfunction getLogger (loggerCategoryName) {\n\n  // Use default logger if categoryName is not specified or invalid\n  if (typeof loggerCategoryName !== \"string\") {\n    loggerCategoryName = Logger.DEFAULT_CATEGORY;\n  }\n\n  if (!hasLogger(loggerCategoryName)) {\n\n    var level;\n\n    /* jshint -W073 */\n    // If there's a \"levels\" entry in the configuration\n    if (levels.config) {\n      // Goes through the categories in the levels configuration entry,\n      // starting with the \"higher\" ones.\n      var keys = Object.keys(levels.config).sort();\n      for (var idx = 0; idx < keys.length; idx++) {\n        var levelCategory = keys[idx];\n        if (doesLevelEntryContainsLogger(levelCategory, loggerCategoryName)) {\n          // level for the logger\n          level = levels.config[levelCategory];\n        }\n      }\n    }\n    /* jshint +W073 */\n\n    // Create the logger for this name if it doesn't already exist\n    loggers[loggerCategoryName] = new Logger(loggerCategoryName, level);\n\n    /* jshint -W083 */\n    var appenderList;\n    for(var appenderCategory in appenders) {\n      if (doesAppenderContainsLogger(appenderCategory, loggerCategoryName)) {\n        appenderList = appenders[appenderCategory];\n        appenderList.forEach(function(appender) {\n          loggers[loggerCategoryName].addListener(\"log\", appender);\n        });\n      }\n    }\n    /* jshint +W083 */\n\n    if (appenders[ALL_CATEGORIES]) {\n      appenderList = appenders[ALL_CATEGORIES];\n      appenderList.forEach(function(appender) {\n        loggers[loggerCategoryName].addListener(\"log\", appender);\n      });\n    }\n  }\n\n  return loggers[loggerCategoryName];\n}\n\n/**\n * args are appender, optional shutdown function, then zero or more categories\n */\nfunction addAppender () {\n  var args = Array.prototype.slice.call(arguments);\n  var appender = args.shift();\n  //check for a shutdown fn\n  if (args.length > 0 && typeof args[0] === 'function') {\n    appenderShutdowns[appender] = args.shift();\n  }\n\n  if (args.length === 0 || args[0] === undefined) {\n    args = [ ALL_CATEGORIES ];\n  }\n  //argument may already be an array\n  if (Array.isArray(args[0])) {\n    args = args[0];\n  }\n\n  args.forEach(function(appenderCategory) {\n    addAppenderToCategory(appender, appenderCategory);\n\n    if (appenderCategory === ALL_CATEGORIES) {\n      addAppenderToAllLoggers(appender);\n    } else {\n\n      for(var loggerCategory in loggers) {\n        if (doesAppenderContainsLogger(appenderCategory,loggerCategory)) {\n          loggers[loggerCategory].addListener(\"log\", appender);\n        }\n      }\n\n    }\n  });\n}\n\nfunction addAppenderToAllLoggers(appender) {\n  for (var logger in loggers) {\n    if (hasLogger(logger)) {\n      loggers[logger].addListener(\"log\", appender);\n    }\n  }\n}\n\nfunction addAppenderToCategory(appender, category) {\n  if (!appenders[category]) {\n    appenders[category] = [];\n  }\n  appenders[category].push(appender);\n}\n\nfunction clearAppenders () {\n  //if we're calling clearAppenders, we're probably getting ready to write\n  //so turn log writes back on, just in case this is after a shutdown\n  loggerModule.enableAllLogWrites();\n  appenders = {};\n  for (var logger in loggers) {\n    if (hasLogger(logger)) {\n      loggers[logger].removeAllListeners(\"log\");\n    }\n  }\n}\n\nfunction configureAppenders(appenderList, options) {\n  clearAppenders();\n  if (appenderList) {\n    appenderList.forEach(function(appenderConfig) {\n      loadAppender(appenderConfig.type);\n      var appender;\n      appenderConfig.makers = appenderMakers;\n      try {\n        appender = appenderMakers[appenderConfig.type](appenderConfig, options);\n        addAppender(appender, appenderConfig.category);\n      } catch(e) {\n        throw new Error(\"log4js configuration problem for \" + util.inspect(appenderConfig), e);\n      }\n    });\n  }\n}\n\nfunction configureLevels(_levels) {\n  levels.config = _levels; // Keep it so we can create loggers later using this cfg\n  if (_levels) {\n    var keys = Object.keys(levels.config).sort();\n    for (var idx in keys) {\n      var category = keys[idx];\n      if(category === ALL_CATEGORIES) {\n        setGlobalLogLevel(_levels[category]);\n      }\n      /* jshint -W073 */\n      for(var loggerCategory in loggers) {\n        if (doesLevelEntryContainsLogger(category, loggerCategory)) {\n          loggers[loggerCategory].setLevel(_levels[category]);\n        }\n      }\n      /* jshint +W073 */\n    }\n  }\n}\n\nfunction setGlobalLogLevel(level) {\n  Logger.prototype.level = levels.toLevel(level, levels.TRACE);\n}\n\n/**\n * Get the default logger instance.\n * @return {Logger} instance of default logger\n * @static\n */\nfunction getDefaultLogger () {\n  return getLogger(Logger.DEFAULT_CATEGORY);\n}\n\nvar configState = {};\n\nfunction loadConfigurationFile(filename) {\n  if (filename) {\n    return JSON.parse(fs.readFileSync(filename, \"utf8\"));\n  }\n  return undefined;\n}\n\nfunction configureOnceOff(config, options) {\n  if (config) {\n    try {\n      restoreConsole();\n      configureLevels(config.levels);\n      configureAppenders(config.appenders, options);\n\n      if (config.replaceConsole) {\n        replaceConsole();\n      }\n    } catch (e) {\n      throw new Error(\n        \"Problem reading log4js config \" + util.inspect(config) +\n          \". Error was \\\"\" + e.message + \"\\\" (\" + e.stack + \")\"\n      );\n    }\n  }\n}\n\nfunction reloadConfiguration(options) {\n  var mtime = getMTime(configState.filename);\n  if (!mtime) return;\n\n  if (configState.lastMTime && (mtime.getTime() > configState.lastMTime.getTime())) {\n    configureOnceOff(loadConfigurationFile(configState.filename), options);\n  }\n  configState.lastMTime = mtime;\n}\n\nfunction getMTime(filename) {\n  var mtime;\n  try {\n    mtime = fs.statSync(configState.filename).mtime;\n  } catch (e) {\n    getLogger('log4js').warn('Failed to load configuration file ' + filename);\n  }\n  return mtime;\n}\n\nfunction initReloadConfiguration(filename, options) {\n  if (configState.timerId) {\n    clearInterval(configState.timerId);\n    delete configState.timerId;\n  }\n  configState.filename = filename;\n  configState.lastMTime = getMTime(filename);\n  configState.timerId = setInterval(reloadConfiguration, options.reloadSecs*1000, options);\n}\n\nfunction configure(configurationFileOrObject, options) {\n  var config = configurationFileOrObject;\n  config = config || process.env.LOG4JS_CONFIG;\n  options = options || {};\n\n  if (config === undefined || config === null || typeof(config) === 'string') {\n    if (options.reloadSecs) {\n      initReloadConfiguration(config, options);\n    }\n    config = loadConfigurationFile(config) || defaultConfig;\n  } else {\n    if (options.reloadSecs) {\n      getLogger('log4js').warn(\n        'Ignoring configuration reload parameter for \"object\" configuration.'\n      );\n    }\n  }\n  configureOnceOff(config, options);\n}\n\nvar originalConsoleFunctions = {\n  log: console.log,\n  debug: console.debug,\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n};\n\nfunction replaceConsole(logger) {\n  function replaceWith(fn) {\n    return function() {\n      fn.apply(logger, arguments);\n    };\n  }\n  logger = logger || getLogger(\"console\");\n  ['log','debug','info','warn','error'].forEach(function (item) {\n    console[item] = replaceWith(item === 'log' ? logger.info : logger[item]);\n  });\n}\n\nfunction restoreConsole() {\n  ['log', 'debug', 'info', 'warn', 'error'].forEach(function (item) {\n    console[item] = originalConsoleFunctions[item];\n  });\n}\n\n/**\n * Load an appenderModule based on the provided appender filepath. Will first\n * check if the appender path is a subpath of the log4js \"lib/appenders\" directory.\n * If not, it will attempt to load the the appender as complete path.\n *\n * @param {string} appender The filepath for the appender.\n * @returns {Object|null} The required appender or null if appender could not be loaded.\n * @private\n */\nfunction requireAppender(appender) {\n  var appenderModule;\n  try {\n    appenderModule = require('./appenders/' + appender);\n  } catch (e) {\n    appenderModule = require(appender);\n  }\n  return appenderModule;\n}\n\n/**\n * Load an appender. Provided the appender path to be loaded. If appenderModule is defined,\n * it will be used in place of requiring the appender module.\n *\n * @param {string} appender The path to the appender module.\n * @param {Object|void} [appenderModule] The pre-required appender module. When provided,\n * instead of requiring the appender by its path, this object will be used.\n * @returns {void}\n * @private\n */\nfunction loadAppender(appender, appenderModule) {\n  appenderModule = appenderModule || requireAppender(appender);\n\n  if (!appenderModule) {\n    throw new Error(\"Invalid log4js appender: \" + util.inspect(appender));\n  }\n\n  module.exports.appenders[appender] = appenderModule.appender.bind(appenderModule);\n  if (appenderModule.shutdown) {\n    appenderShutdowns[appender] = appenderModule.shutdown.bind(appenderModule);\n  }\n  appenderMakers[appender] = appenderModule.configure.bind(appenderModule);\n}\n\n/**\n * Shutdown all log appenders. This will first disable all writing to appenders\n * and then call the shutdown function each appender.\n *\n * @params {Function} cb - The callback to be invoked once all appenders have\n *  shutdown. If an error occurs, the callback will be given the error object\n *  as the first argument.\n * @returns {void}\n */\nfunction shutdown(cb) {\n  // First, disable all writing to appenders. This prevents appenders from\n  // not being able to be drained because of run-away log writes.\n  loggerModule.disableAllLogWrites();\n\n  //turn off config reloading\n  if (configState.timerId) {\n    clearInterval(configState.timerId);\n  }\n\n  // Call each of the shutdown functions in parallel\n  var completed = 0;\n  var error;\n  var shutdownFcts = [];\n  var complete = function(err) {\n    error = error || err;\n    completed++;\n    if (completed >= shutdownFcts.length) {\n      cb(error);\n    }\n  };\n  for (var category in appenderShutdowns) {\n    if (appenderShutdowns.hasOwnProperty(category)) {\n      shutdownFcts.push(appenderShutdowns[category]);\n    }\n  }\n  if (!shutdownFcts.length) {\n    return cb();\n  }\n  shutdownFcts.forEach(function(shutdownFct) { shutdownFct(complete); });\n}\n\nmodule.exports = {\n  getBufferedLogger: getBufferedLogger,\n  getLogger: getLogger,\n  getDefaultLogger: getDefaultLogger,\n  hasLogger: hasLogger,\n\n  addAppender: addAppender,\n  loadAppender: loadAppender,\n  clearAppenders: clearAppenders,\n  configure: configure,\n  shutdown: shutdown,\n\n  replaceConsole: replaceConsole,\n  restoreConsole: restoreConsole,\n\n  levels: levels,\n  setGlobalLogLevel: setGlobalLogLevel,\n\n  layouts: layouts,\n  appenders: {},\n  appenderMakers: appenderMakers,\n  connectLogger: require('./connect-logger').connectLogger\n};\n\n//set ourselves up\nconfigure();\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/layouts.js":"\"use strict\";\nvar dateFormat = require('./date_format')\n, os = require('os')\n, eol = os.EOL || '\\n'\n, util = require('util')\n, semver = require('semver')\n, replacementRegExp = /%[sdj]/g\n, layoutMakers = {\n  \"messagePassThrough\": function() { return messagePassThroughLayout; },\n  \"basic\": function() { return basicLayout; },\n  \"colored\": function() { return colouredLayout; },\n  \"coloured\": function() { return colouredLayout; },\n  \"pattern\": function (config) {\n    return patternLayout(config && config.pattern, config && config.tokens);\n\t},\n  \"dummy\": function() { return dummyLayout; }\n}\n, colours = {\n  ALL: \"grey\",\n  TRACE: \"blue\",\n  DEBUG: \"cyan\",\n  INFO: \"green\",\n  WARN: \"yellow\",\n  ERROR: \"red\",\n  FATAL: \"magenta\",\n  OFF: \"grey\"\n};\n\nfunction wrapErrorsWithInspect(items) {\n  return items.map(function(item) {\n    if ((item instanceof Error) && item.stack) {\n      return { inspect: function() {\n        if (semver.satisfies(process.version, '>=6')) {\n          return util.format(item);\n        } else {\n          return util.format(item) + '\\n' + item.stack;\n        }\n      } };\n    } else {\n      return item;\n    }\n  });\n}\n\nfunction formatLogData(logData) {\n  var data = logData;\n  if (!Array.isArray(data)) {\n    var numArgs = arguments.length;\n    data = new Array(numArgs);\n    for (var i = 0; i < numArgs; i++) {\n      data[i] = arguments[i];\n    }\n  }\n  return util.format.apply(util, wrapErrorsWithInspect(data));\n}\n\nvar styles = {\n    //styles\n  'bold'      : [1,  22],\n  'italic'    : [3,  23],\n  'underline' : [4,  24],\n  'inverse'   : [7,  27],\n  //grayscale\n  'white'     : [37, 39],\n  'grey'      : [90, 39],\n  'black'     : [90, 39],\n  //colors\n  'blue'      : [34, 39],\n  'cyan'      : [36, 39],\n  'green'     : [32, 39],\n  'magenta'   : [35, 39],\n  'red'       : [31, 39],\n  'yellow'    : [33, 39]\n};\n\nfunction colorizeStart(style) {\n  return style ? '\\x1B[' + styles[style][0] + 'm' : '';\n}\nfunction colorizeEnd(style) {\n  return style ? '\\x1B[' + styles[style][1] + 'm' : '';\n}\n/**\n * Taken from masylum's fork (https://github.com/masylum/log4js-node)\n */\nfunction colorize (str, style) {\n  return colorizeStart(style) + str + colorizeEnd(style);\n}\n\nfunction timestampLevelAndCategory(loggingEvent, colour, timezoneOffest) {\n  var output = colorize(\n    formatLogData(\n      '[%s] [%s] %s - '\n      , dateFormat.asString(loggingEvent.startTime, timezoneOffest)\n      , loggingEvent.level\n      , loggingEvent.categoryName\n    )\n    , colour\n  );\n  return output;\n}\n\n/**\n * BasicLayout is a simple layout for storing the logs. The logs are stored\n * in following format:\n * <pre>\n * [startTime] [logLevel] categoryName - message\\n\n * </pre>\n *\n * @author Stephan Strittmatter\n */\nfunction basicLayout (loggingEvent, timezoneOffset) {\n  return timestampLevelAndCategory(\n    loggingEvent,\n    undefined,\n    timezoneOffset\n  ) + formatLogData(loggingEvent.data);\n}\n\n/**\n * colouredLayout - taken from masylum's fork.\n * same as basicLayout, but with colours.\n */\nfunction colouredLayout (loggingEvent, timezoneOffset) {\n  return timestampLevelAndCategory(\n    loggingEvent,\n    colours[loggingEvent.level.toString()],\n    timezoneOffset\n  ) + formatLogData(loggingEvent.data);\n}\n\nfunction messagePassThroughLayout (loggingEvent) {\n  return formatLogData(loggingEvent.data);\n}\n\nfunction dummyLayout(loggingEvent) {\n  return loggingEvent.data[0];\n}\n\n/**\n * PatternLayout\n * Format for specifiers is %[padding].[truncation][field]{[format]}\n * e.g. %5.10p - left pad the log level by 5 characters, up to a max of 10\n * Fields can be any of:\n *  - %r time in toLocaleTimeString format\n *  - %p log level\n *  - %c log category\n *  - %h hostname\n *  - %m log data\n *  - %d date in various formats\n *  - %% %\n *  - %n newline\n *  - %z pid\n *  - %x{<tokenname>} add dynamic tokens to your log. Tokens are specified in the tokens parameter\n * You can use %[ and %] to define a colored block.\n *\n * Tokens are specified as simple key:value objects.\n * The key represents the token name whereas the value can be a string or function\n * which is called to extract the value to put in the log message. If token is not\n * found, it doesn't replace the field.\n *\n * A sample token would be: { \"pid\" : function() { return process.pid; } }\n *\n * Takes a pattern string, array of tokens and returns a layout function.\n * @param {String} Log format pattern String\n * @param {object} map object of different tokens\n * @param {number} timezone offset in minutes\n * @return {Function}\n * @author Stephan Strittmatter\n * @author Jan Schmidle\n */\nfunction patternLayout (pattern, tokens, timezoneOffset) {\n  // jshint maxstatements:22\n  var TTCC_CONVERSION_PATTERN  = \"%r %p %c - %m%n\";\n  var regex = /%(-?[0-9]+)?(\\.?[0-9]+)?([\\[\\]cdhmnprzxy%])(\\{([^\\}]+)\\})?|([^%]+)/;\n\n  pattern = pattern || TTCC_CONVERSION_PATTERN;\n\n  function categoryName(loggingEvent, specifier) {\n    var loggerName = loggingEvent.categoryName;\n    if (specifier) {\n      var precision = parseInt(specifier, 10);\n      var loggerNameBits = loggerName.split(\".\");\n      if (precision < loggerNameBits.length) {\n        loggerName = loggerNameBits.slice(loggerNameBits.length - precision).join(\".\");\n      }\n    }\n    return loggerName;\n  }\n\n  function formatAsDate(loggingEvent, specifier) {\n    var format = dateFormat.ISO8601_FORMAT;\n    if (specifier) {\n      format = specifier;\n      // Pick up special cases\n      if (format == \"ISO8601\") {\n        format = dateFormat.ISO8601_FORMAT;\n      } else if (format == \"ISO8601_WITH_TZ_OFFSET\") {\n        format = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;\n      } else if (format == \"ABSOLUTE\") {\n        format = dateFormat.ABSOLUTETIME_FORMAT;\n      } else if (format == \"DATE\") {\n        format = dateFormat.DATETIME_FORMAT;\n      }\n    }\n    // Format the date\n    return dateFormat.asString(format, loggingEvent.startTime, timezoneOffset);\n  }\n\n  function hostname() {\n    return os.hostname().toString();\n  }\n\n  function formatMessage(loggingEvent) {\n    return formatLogData(loggingEvent.data);\n  }\n\n  function endOfLine() {\n    return eol;\n  }\n\n  function logLevel(loggingEvent) {\n    return loggingEvent.level.toString();\n  }\n\n  function startTime(loggingEvent) {\n    return dateFormat.asString('hh:mm:ss', loggingEvent.startTime, timezoneOffset);\n  }\n\n  function startColour(loggingEvent) {\n    return colorizeStart(colours[loggingEvent.level.toString()]);\n  }\n\n  function endColour(loggingEvent) {\n    return colorizeEnd(colours[loggingEvent.level.toString()]);\n  }\n\n  function percent() {\n    return '%';\n  }\n\n  function pid(loggingEvent) {\n    if (loggingEvent && loggingEvent.pid) {\n      return loggingEvent.pid;\n    } else {\n      return process.pid;\n    }\n  }\n\n  function clusterInfo(loggingEvent, specifier) {\n    if (loggingEvent.cluster && specifier) {\n      return specifier\n        .replace('%m', loggingEvent.cluster.master)\n        .replace('%w', loggingEvent.cluster.worker)\n        .replace('%i', loggingEvent.cluster.workerId);\n    } else if (loggingEvent.cluster) {\n      return loggingEvent.cluster.worker+'@'+loggingEvent.cluster.master;\n    } else {\n      return pid();\n    }\n  }\n\n  function userDefined(loggingEvent, specifier) {\n    if (typeof(tokens[specifier]) !== 'undefined') {\n      if (typeof(tokens[specifier]) === 'function') {\n        return tokens[specifier](loggingEvent);\n      } else {\n        return tokens[specifier];\n      }\n    }\n    return null;\n  }\n\n  var replacers = {\n    'c': categoryName,\n    'd': formatAsDate,\n    'h': hostname,\n    'm': formatMessage,\n    'n': endOfLine,\n    'p': logLevel,\n    'r': startTime,\n    '[': startColour,\n    ']': endColour,\n    'y': clusterInfo,\n    'z': pid,\n    '%': percent,\n    'x': userDefined\n  };\n\n  function replaceToken(conversionCharacter, loggingEvent, specifier) {\n    return replacers[conversionCharacter](loggingEvent, specifier);\n  }\n\n  function truncate(truncation, toTruncate) {\n    var len;\n    if (truncation) {\n      len = parseInt(truncation.substr(1), 10);\n      return toTruncate.substring(0, len);\n    }\n\n    return toTruncate;\n  }\n\n  function pad(padding, toPad) {\n    var len;\n    if (padding) {\n      if (padding.charAt(0) == \"-\") {\n        len = parseInt(padding.substr(1), 10);\n        // Right pad with spaces\n        while (toPad.length < len) {\n          toPad += \" \";\n        }\n      } else {\n        len = parseInt(padding, 10);\n        // Left pad with spaces\n        while (toPad.length < len) {\n          toPad = \" \" + toPad;\n        }\n      }\n    }\n    return toPad;\n  }\n\n  function truncateAndPad(toTruncAndPad, truncation, padding) {\n    var replacement = toTruncAndPad;\n    replacement = truncate(truncation, replacement);\n    replacement = pad(padding, replacement);\n    return replacement;\n  }\n\n  return function(loggingEvent) {\n    var formattedString = \"\";\n    var result;\n    var searchString = pattern;\n\n    while ((result = regex.exec(searchString))) {\n      var matchedString = result[0];\n      var padding = result[1];\n      var truncation = result[2];\n      var conversionCharacter = result[3];\n      var specifier = result[5];\n      var text = result[6];\n\n      // Check if the pattern matched was just normal text\n      if (text) {\n        formattedString += \"\" + text;\n      } else {\n        // Create a raw replacement string based on the conversion\n        // character and specifier\n        var replacement = replaceToken(conversionCharacter, loggingEvent, specifier);\n        formattedString += truncateAndPad(replacement, truncation, padding);\n      }\n      searchString = searchString.substr(result.index + result[0].length);\n    }\n    return formattedString;\n  };\n\n}\n\nmodule.exports = {\n  basicLayout: basicLayout,\n  messagePassThroughLayout: messagePassThroughLayout,\n  patternLayout: patternLayout,\n  colouredLayout: colouredLayout,\n  coloredLayout: colouredLayout,\n  dummyLayout: dummyLayout,\n  addLayout: function(name, serializerGenerator) {\n    layoutMakers[name] = serializerGenerator;\n  },\n  layout: function(name, config) {\n    return layoutMakers[name] && layoutMakers[name](config);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/date_format.js":"\"use strict\";\nexports.ISO8601_FORMAT = \"yyyy-MM-dd hh:mm:ss.SSS\";\nexports.ISO8601_WITH_TZ_OFFSET_FORMAT = \"yyyy-MM-ddThh:mm:ss.SSSO\";\nexports.DATETIME_FORMAT = \"dd MM yyyy hh:mm:ss.SSS\";\nexports.ABSOLUTETIME_FORMAT = \"hh:mm:ss.SSS\";\n\nfunction padWithZeros(vNumber, width) {\n  var numAsString = vNumber + \"\";\n  while (numAsString.length < width) {\n    numAsString = \"0\" + numAsString;\n  }\n  return numAsString;\n}\n\nfunction addZero(vNumber) {\n  return padWithZeros(vNumber, 2);\n}\n\n/**\n * Formats the TimeOffest\n * Thanks to http://www.svendtofte.com/code/date_format/\n * @private\n */\nfunction offset(timezoneOffset) {\n  // Difference to Greenwich time (GMT) in hours\n  var os = Math.abs(timezoneOffset);\n  var h = String(Math.floor(os/60));\n  var m = String(os%60);\n  if (h.length == 1) {\n    h = \"0\" + h;\n  }\n  if (m.length == 1) {\n    m = \"0\" + m;\n  }\n  return timezoneOffset < 0 ? \"+\"+h+m : \"-\"+h+m;\n}\n\nexports.asString = function(/*format,*/ date, timezoneOffset) {\n  /*jshint -W071 */\n  var format = exports.ISO8601_FORMAT;\n  if (typeof(date) === \"string\") {\n    format = arguments[0];\n    date = arguments[1];\n    timezoneOffset = arguments[2];\n  }\n  // make the date independent of the system timezone by working with UTC\n  if (timezoneOffset === undefined) {\n    timezoneOffset = date.getTimezoneOffset();\n  }\n  date.setUTCMinutes(date.getUTCMinutes() - timezoneOffset);\n  var vDay = addZero(date.getUTCDate());\n  var vMonth = addZero(date.getUTCMonth()+1);\n  var vYearLong = addZero(date.getUTCFullYear());\n  var vYearShort = addZero(date.getUTCFullYear().toString().substring(2,4));\n  var vYear = (format.indexOf(\"yyyy\") > -1 ? vYearLong : vYearShort);\n  var vHour  = addZero(date.getUTCHours());\n  var vMinute = addZero(date.getUTCMinutes());\n  var vSecond = addZero(date.getUTCSeconds());\n  var vMillisecond = padWithZeros(date.getUTCMilliseconds(), 3);\n  var vTimeZone = offset(timezoneOffset);\n  date.setUTCMinutes(date.getUTCMinutes() + timezoneOffset);\n  var formatted = format\n    .replace(/dd/g, vDay)\n    .replace(/MM/g, vMonth)\n    .replace(/y{1,4}/g, vYear)\n    .replace(/hh/g, vHour)\n    .replace(/mm/g, vMinute)\n    .replace(/ss/g, vSecond)\n    .replace(/SSS/g, vMillisecond)\n    .replace(/O/g, vTimeZone);\n  return formatted;\n\n};\n/*jshint +W071 */\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/levels.js":"\"use strict\";\n\nfunction Level(level, levelStr) {\n  this.level = level;\n  this.levelStr = levelStr;\n}\n\n/**\n * converts given String to corresponding Level\n * @param {String} sArg String value of Level OR Log4js.Level\n * @param {Log4js.Level} defaultLevel default Level, if no String representation\n * @return Level object\n * @type Log4js.Level\n */\nfunction toLevel(sArg, defaultLevel) {\n  if (!sArg) {\n    return defaultLevel;\n  }\n  if (sArg instanceof Level) {\n    module.exports[sArg.toString()] = sArg;\n    return sArg;\n  }\n  if (typeof sArg === \"string\") {\n    return module.exports[sArg.toUpperCase()] || defaultLevel;\n  }\n  return toLevel(sArg.toString());\n}\n\nLevel.prototype.toString = function() {\n  return this.levelStr;\n};\n\nLevel.prototype.isLessThanOrEqualTo = function(otherLevel) {\n  if (typeof otherLevel === \"string\") {\n    otherLevel = toLevel(otherLevel);\n  }\n  return this.level <= otherLevel.level;\n};\n\nLevel.prototype.isGreaterThanOrEqualTo = function(otherLevel) {\n  if (typeof otherLevel === \"string\") {\n    otherLevel = toLevel(otherLevel);\n  }\n  return this.level >= otherLevel.level;\n};\n\nLevel.prototype.isEqualTo = function(otherLevel) {\n  if (typeof otherLevel === \"string\") {\n    otherLevel = toLevel(otherLevel);\n  }\n  return this.level === otherLevel.level;\n};\n\nmodule.exports = {\n  ALL: new Level(Number.MIN_VALUE, \"ALL\"),\n  TRACE: new Level(5000, \"TRACE\"),\n  DEBUG: new Level(10000, \"DEBUG\"),\n  INFO: new Level(20000, \"INFO\"),\n  WARN: new Level(30000, \"WARN\"),\n  ERROR: new Level(40000, \"ERROR\"),\n  FATAL: new Level(50000, \"FATAL\"),\n  MARK: new Level(9007199254740992, \"MARK\"), // 2^53\n  OFF: new Level(Number.MAX_VALUE, \"OFF\"),\n  toLevel: toLevel,\n  Level: Level\n};\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/logger.js":"\"use strict\";\nvar levels = require('./levels')\n, util = require('util')\n, events = require('events')\n, DEFAULT_CATEGORY = '[default]';\n\nvar logWritesEnabled = true;\n\n/**\n * Models a logging event.\n * @constructor\n * @param {String} categoryName name of category\n * @param {Log4js.Level} level level of message\n * @param {Array} data objects to log\n * @param {Log4js.Logger} logger the associated logger\n * @author Seth Chisamore\n */\nfunction LoggingEvent (categoryName, level, data, logger) {\n  this.startTime = new Date();\n  this.categoryName = categoryName;\n  this.data = data;\n  this.level = level;\n  this.logger = logger;\n}\n\n/**\n * Logger to log messages.\n * use {@see Log4js#getLogger(String)} to get an instance.\n * @constructor\n * @param name name of category to log to\n * @author Stephan Strittmatter\n */\nfunction Logger (name, level) {\n  this.category = name || DEFAULT_CATEGORY;\n\n  if (level) {\n    this.setLevel(level);\n  }\n}\nutil.inherits(Logger, events.EventEmitter);\nLogger.DEFAULT_CATEGORY = DEFAULT_CATEGORY;\nLogger.prototype.level = levels.TRACE;\n\nLogger.prototype.setLevel = function(level) {\n  this.level = levels.toLevel(level, this.level || levels.TRACE);\n};\n\nLogger.prototype.removeLevel = function() {\n  delete this.level;\n};\n\nLogger.prototype.log = function() {\n  var logLevel = levels.toLevel(arguments[0], levels.INFO);\n  if (!this.isLevelEnabled(logLevel)) {\n    return;\n  }\n  var numArgs = arguments.length - 1;\n  var args = new Array(numArgs);\n  for (var i = 0; i < numArgs; i++) {\n    args[i] = arguments[i + 1];\n  }\n  this._log(logLevel, args);\n};\n\nLogger.prototype.isLevelEnabled = function(otherLevel) {\n  return this.level.isLessThanOrEqualTo(otherLevel);\n};\n\n['Trace','Debug','Info','Warn','Error','Fatal', 'Mark'].forEach(addLevelMethods);\n\nfunction addLevelMethods(level) {\n  level = levels.toLevel(level);\n\n  var levelStrLower = level.toString().toLowerCase();\n  var levelMethod = levelStrLower.replace(/_([a-z])/g, function(g) { return g[1].toUpperCase(); } );\n  var isLevelMethod = levelMethod[0].toUpperCase() + levelMethod.slice(1);\n\n  Logger.prototype['is'+isLevelMethod+'Enabled'] = function() {\n    return this.isLevelEnabled(level);\n  };\n\n  Logger.prototype[levelMethod] = function () {\n    if (logWritesEnabled && this.isLevelEnabled(level)) {\n      var numArgs = arguments.length;\n      var args = new Array(numArgs);\n      for (var i = 0; i < numArgs; i++) {\n        args[i] = arguments[i];\n      }\n      this._log(level, args);\n    }\n  };\n}\n\nLogger.prototype._log = function(level, data) {\n  var loggingEvent = new LoggingEvent(this.category, level, data, this);\n  this.emit('log', loggingEvent);\n};\n\n/**\n * Disable all log writes.\n * @returns {void}\n */\nfunction disableAllLogWrites() {\n  logWritesEnabled = false;\n}\n\n/**\n * Enable log writes.\n * @returns {void}\n */\nfunction enableAllLogWrites() {\n  logWritesEnabled = true;\n}\n\nexports.LoggingEvent = LoggingEvent;\nexports.Logger = Logger;\nexports.disableAllLogWrites = disableAllLogWrites;\nexports.enableAllLogWrites = enableAllLogWrites;\nexports.addLevelMethods = addLevelMethods;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/connect-logger.js":"\"use strict\";\nvar levels = require(\"./levels\");\nvar DEFAULT_FORMAT = ':remote-addr - -' +\n  ' \":method :url HTTP/:http-version\"' +\n  ' :status :content-length \":referrer\"' +\n  ' \":user-agent\"';\n/**\n * Log requests with the given `options` or a `format` string.\n *\n * Options:\n *\n *   - `format`        Format string, see below for tokens\n *   - `level`         A log4js levels instance. Supports also 'auto'\n *\n * Tokens:\n *\n *   - `:req[header]` ex: `:req[Accept]`\n *   - `:res[header]` ex: `:res[Content-Length]`\n *   - `:http-version`\n *   - `:response-time`\n *   - `:remote-addr`\n *   - `:date`\n *   - `:method`\n *   - `:url`\n *   - `:referrer`\n *   - `:user-agent`\n *   - `:status`\n *\n * @param {String|Function|Object} format or options\n * @return {Function}\n * @api public\n */\n\nfunction getLogger(logger4js, options) {\n\tif ('object' == typeof options) {\n\t\toptions = options || {};\n\t} else if (options) {\n\t\toptions = { format: options };\n\t} else {\n\t\toptions = {};\n\t}\n\n\tvar thislogger = logger4js\n  , level = levels.toLevel(options.level, levels.INFO)\n  , fmt = options.format || DEFAULT_FORMAT\n  , nolog = options.nolog ? createNoLogCondition(options.nolog) : null;\n\n  return function (req, res, next) {\n    // mount safety\n    if (req._logging) return next();\n\n\t\t// nologs\n\t\tif (nolog && nolog.test(req.originalUrl)) return next();\n\t\tif (thislogger.isLevelEnabled(level) || options.level === 'auto') {\n\n\t\t\tvar start = new Date()\n\t\t\t, statusCode\n\t\t\t, writeHead = res.writeHead\n\t\t\t, url = req.originalUrl;\n\n\t\t\t// flag as logging\n\t\t\treq._logging = true;\n\n\t\t\t// proxy for statusCode.\n\t\t\tres.writeHead = function(code, headers){\n\t\t\t\tres.writeHead = writeHead;\n\t\t\t\tres.writeHead(code, headers);\n\t\t\t\tres.__statusCode = statusCode = code;\n\t\t\t\tres.__headers = headers || {};\n\n\t\t\t\t//status code response level handling\n\t\t\t\tif(options.level === 'auto'){\n\t\t\t\t\tlevel = levels.INFO;\n\t\t\t\t\tif(code >= 300) level = levels.WARN;\n\t\t\t\t\tif(code >= 400) level = levels.ERROR;\n\t\t\t\t} else {\n\t\t\t\t\tlevel = levels.toLevel(options.level, levels.INFO);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t//hook on end request to emit the log entry of the HTTP request.\n\t\t\tres.on('finish', function() {\n\t\t\t\tres.responseTime = new Date() - start;\n\t\t\t\t//status code response level handling\n\t\t\t\tif(res.statusCode && options.level === 'auto'){\n\t\t\t\t\tlevel = levels.INFO;\n\t\t\t\t\tif(res.statusCode >= 300) level = levels.WARN;\n\t\t\t\t\tif(res.statusCode >= 400) level = levels.ERROR;\n\t\t\t\t}\n\t\t\t\tif (thislogger.isLevelEnabled(level)) {\n          var combined_tokens = assemble_tokens(req, res, options.tokens || []);\n\t\t\t\t\tif (typeof fmt === 'function') {\n\t\t\t\t\t\tvar line = fmt(req, res, function(str){ return format(str, combined_tokens); });\n\t\t\t\t\t\tif (line) thislogger.log(level, line);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthislogger.log(level, format(fmt, combined_tokens));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n    //ensure next gets always called\n    next();\n  };\n}\n\n/**\n * Adds custom {token, replacement} objects to defaults,\n * overwriting the defaults if any tokens clash\n *\n * @param  {IncomingMessage} req\n * @param  {ServerResponse} res\n * @param  {Array} custom_tokens\n *    [{ token: string-or-regexp, replacement: string-or-replace-function }]\n * @return {Array}\n */\nfunction assemble_tokens(req, res, custom_tokens) {\n  var array_unique_tokens = function(array) {\n    var a = array.concat();\n    for(var i=0; i<a.length; ++i) {\n      for(var j=i+1; j<a.length; ++j) {\n        if(a[i].token == a[j].token) { // not === because token can be regexp object\n          a.splice(j--, 1);\n        }\n      }\n    }\n    return a;\n  };\n\n  var default_tokens = [];\n  default_tokens.push({ token: ':url', replacement: getUrl(req) });\n  default_tokens.push({ token: ':protocol', replacement: req.protocol });\n  default_tokens.push({ token: ':hostname', replacement: req.hostname });\n  default_tokens.push({ token: ':method', replacement: req.method });\n  default_tokens.push({ token: ':status', replacement: res.__statusCode || res.statusCode });\n  default_tokens.push({ token: ':response-time', replacement: res.responseTime });\n  default_tokens.push({ token: ':date', replacement: new Date().toUTCString() });\n  default_tokens.push({\n    token: ':referrer',\n    replacement: req.headers.referer || req.headers.referrer || ''\n  });\n  default_tokens.push({\n    token: ':http-version',\n    replacement: req.httpVersionMajor + '.' + req.httpVersionMinor\n  });\n  default_tokens.push({\n    token: ':remote-addr',\n    replacement:\n      req.headers['x-forwarded-for'] ||\n      req.ip ||\n      req._remoteAddress ||\n      (req.socket &&\n        (req.socket.remoteAddress ||\n          (req.socket.socket && req.socket.socket.remoteAddress)\n        )\n      )\n    }\n  );\n  default_tokens.push({ token: ':user-agent', replacement: req.headers['user-agent'] });\n  default_tokens.push({\n    token: ':content-length',\n    replacement:\n      (res._headers && res._headers['content-length']) ||\n      (res.__headers && res.__headers['Content-Length']) ||\n      '-'\n    }\n  );\n  default_tokens.push({ token: /:req\\[([^\\]]+)\\]/g, replacement: function(_, field) {\n    return req.headers[field.toLowerCase()];\n  } });\n  default_tokens.push({ token: /:res\\[([^\\]]+)\\]/g, replacement: function(_, field) {\n    return res._headers ?\n      (res._headers[field.toLowerCase()] || res.__headers[field])\n      : (res.__headers && res.__headers[field]);\n  } });\n\n  return array_unique_tokens(custom_tokens.concat(default_tokens));\n}\n\n/**\n * Return request url path,\n * adding this function prevents the Cyclomatic Complexity,\n * for the assemble_tokens function at low, to pass the tests.\n *\n * @param  {IncomingMessage} req\n * @return {String}\n * @api private\n */\n\nfunction getUrl(req){\n  return req.originalUrl || req.url;\n}\n/**\n * Return formatted log line.\n *\n * @param  {String} str\n * @param  {IncomingMessage} req\n * @param  {ServerResponse} res\n * @return {String}\n * @api private\n */\n\nfunction format(str, tokens) {\n  for (var i = 0; i < tokens.length; i++) {\n    str = str.replace(tokens[i].token, tokens[i].replacement);\n  }\n  return str;\n}\n\n/**\n * Return RegExp Object about nolog\n *\n * @param  {String} nolog\n * @return {RegExp}\n * @api private\n *\n * syntax\n *  1. String\n *   1.1 \"\\\\.gif\"\n *         NOT LOGGING http://example.com/hoge.gif and http://example.com/hoge.gif?fuga\n *         LOGGING http://example.com/hoge.agif\n *   1.2 in \"\\\\.gif|\\\\.jpg$\"\n *         NOT LOGGING http://example.com/hoge.gif and\n *           http://example.com/hoge.gif?fuga and http://example.com/hoge.jpg?fuga\n *         LOGGING http://example.com/hoge.agif,\n *           http://example.com/hoge.ajpg and http://example.com/hoge.jpg?hoge\n *   1.3 in \"\\\\.(gif|jpe?g|png)$\"\n *         NOT LOGGING http://example.com/hoge.gif and http://example.com/hoge.jpeg\n *         LOGGING http://example.com/hoge.gif?uid=2 and http://example.com/hoge.jpg?pid=3\n *  2. RegExp\n *   2.1 in /\\.(gif|jpe?g|png)$/\n *         SAME AS 1.3\n *  3. Array\n *   3.1 [\"\\\\.jpg$\", \"\\\\.png\", \"\\\\.gif\"]\n *         SAME AS \"\\\\.jpg|\\\\.png|\\\\.gif\"\n */\nfunction createNoLogCondition(nolog) {\n  var regexp = null;\n\n\tif (nolog) {\n    if (nolog instanceof RegExp) {\n      regexp = nolog;\n    }\n\n    if (typeof nolog === 'string') {\n      regexp = new RegExp(nolog);\n    }\n\n    if (Array.isArray(nolog)) {\n      var regexpsAsStrings = nolog.map(\n        function convertToStrings(o) {\n          return o.source ? o.source : o;\n        }\n      );\n      regexp = new RegExp(regexpsAsStrings.join('|'));\n    }\n  }\n\n  return regexp;\n}\n\nexports.connectLogger = getLogger;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/stdout.js":"\"use strict\";\n\nvar layouts = require('../layouts');\n\nfunction stdoutAppender(layout, timezoneOffset) {\n  layout = layout || layouts.colouredLayout;\n  return function(loggingEvent) {\n    process.stdout.write(layout(loggingEvent, timezoneOffset) + '\\n');\n  };\n}\n\nfunction configure(config) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  return stdoutAppender(layout, config.timezoneOffset);\n}\n\nexports.appender = stdoutAppender;\nexports.configure = configure;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/categoryFilter.js":"\"use strict\";\nvar log4js = require('../log4js');\n\nfunction categoryFilter (excludes, appender) {\n  if (typeof(excludes) === 'string') excludes = [excludes];\n  return function(logEvent) {\n    if (excludes.indexOf(logEvent.categoryName) === -1) {\n      appender(logEvent);\n    }\n  };\n}\n\nfunction configure(config, options) {\n  log4js.loadAppender(config.appender.type);\n  var appender = log4js.appenderMakers[config.appender.type](config.appender, options);\n  return categoryFilter(config.exclude, appender);\n}\n\nexports.appender = categoryFilter;\nexports.configure = configure;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/clustered.js":"\"use strict\";\n\nvar cluster = require('cluster');\nvar log4js = require('../log4js');\n\n/**\n * Takes a loggingEvent object, returns string representation of it.\n */\nfunction serializeLoggingEvent(loggingEvent) {\n\t// JSON.stringify(new Error('test')) returns {}, which is not really useful for us.\n\t// The following allows us to serialize errors correctly.\n\tfor (var i = 0; i < loggingEvent.data.length; i++) {\n\t\tvar item = loggingEvent.data[i];\n\t\t// Validate that we really are in this case\n\t\tif (item && item.stack && JSON.stringify(item) === '{}') {\n\t\t\tloggingEvent.data[i] = {stack : item.stack};\n\t\t}\n\t}\n\treturn JSON.stringify(loggingEvent);\n}\n\n/**\n * Takes a string, returns an object with\n * the correct log properties.\n *\n * This method has been \"borrowed\" from the `multiprocess` appender\n * by `nomiddlename`\n * (https://github.com/nomiddlename/log4js-node/blob/master/lib/appenders/multiprocess.js)\n *\n * Apparently, node.js serializes everything to strings when using `process.send()`,\n * so we need smart deserialization that will recreate log date and level for further\n * processing by log4js internals.\n */\nfunction deserializeLoggingEvent(loggingEventString) {\n\n\tvar loggingEvent;\n\n\ttry {\n\n\t\tloggingEvent = JSON.parse(loggingEventString);\n\t\tloggingEvent.startTime = new Date(loggingEvent.startTime);\n\t\tloggingEvent.level = log4js.levels.toLevel(loggingEvent.level.levelStr);\n\t\t// Unwrap serialized errors\n\t\tfor (var i = 0; i < loggingEvent.data.length; i++) {\n\t\t\tvar item = loggingEvent.data[i];\n\t\t\tif (item && item.stack) {\n\t\t\t\tloggingEvent.data[i] = item.stack;\n\t\t\t}\n\t\t}\n\n\t} catch (e) {\n\n\t\t// JSON.parse failed, just log the contents probably a naughty.\n\t\tloggingEvent = {\n\t\t\tstartTime: new Date(),\n\t\t\tcategoryName: 'log4js',\n\t\t\tlevel: log4js.levels.ERROR,\n\t\t\tdata: [ 'Unable to parse log:', loggingEventString ]\n\t\t};\n\t}\n\treturn loggingEvent;\n}\n\n/**\n * Creates an appender.\n *\n * If the current process is a master (`cluster.isMaster`), then this will be a \"master appender\".\n * Otherwise this will be a worker appender, that just sends loggingEvents to the master process.\n *\n * If you are using this method directly, make sure to provide it with `config.actualAppenders`\n * array of actual appender instances.\n *\n * Or better use `configure(config, options)`\n */\nfunction createAppender(config) {\n\n\tif (cluster.isMaster) {\n\n\t\tvar masterAppender = function(loggingEvent) {\n\n\t\t\tif (config.actualAppenders) {\n\t\t\t\tvar size = config.actualAppenders.length;\n\t\t\t\tfor(var i = 0; i < size; i++) {\n            if (\n\t\t\t\t\t\t\t!config.appenders[i].category ||\n\t\t\t\t\t\t\tconfig.appenders[i].category === loggingEvent.categoryName\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// Relying on the index is not a good practice but otherwise\n\t\t\t\t\t\t\t// the change would have been bigger.\n\t\t\t\t\t\t\tconfig.actualAppenders[i](loggingEvent);\n      \t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Listen on new workers\n\t\tcluster.on('fork', function(worker) {\n\n\t\t\tworker.on('message', function(message) {\n\t\t\t\tif (message.type && message.type === '::log-message') {\n\t\t\t\t\tvar loggingEvent = deserializeLoggingEvent(message.event);\n\n\t\t\t\t\t// Adding PID metadata\n\t\t\t\t\tloggingEvent.pid = worker.process.pid;\n\t\t\t\t\tloggingEvent.cluster = {\n\t\t\t\t\t\tmaster: process.pid,\n\t\t\t\t\t\tworker: worker.process.pid,\n\t\t\t\t\t\tworkerId: worker.id\n\t\t\t\t\t};\n\n\t\t\t\t\tmasterAppender(loggingEvent);\n\t\t\t\t}\n\t\t\t});\n\n\t\t});\n\n\t\treturn masterAppender;\n\n\t} else {\n\n\t\treturn function(loggingEvent) {\n\t\t\t// If inside the worker process, then send the logger event to master.\n\t\t\tif (cluster.isWorker) {\n\t\t\t\t// console.log(\"worker \" + cluster.worker.id + \" is sending message\");\n\t\t\t\tprocess.send({ type: '::log-message', event: serializeLoggingEvent(loggingEvent)});\n\t\t\t}\n\t\t};\n\t}\n}\n\nfunction configure(config, options) {\n\n\tif (config.appenders && cluster.isMaster) {\n\n\t\tvar size = config.appenders.length;\n\t\tconfig.actualAppenders = new Array(size);\n\n\t\tfor(var i = 0; i < size; i++) {\n\n\t\t\tlog4js.loadAppender(config.appenders[i].type);\n\t\t\tconfig.actualAppenders[i] = log4js.appenderMakers[config.appenders[i].type](\n\t\t\t\tconfig.appenders[i],\n\t\t\t\toptions\n\t\t\t);\n\n\t\t}\n\t}\n\n\treturn createAppender(config);\n}\n\nexports.appender = createAppender;\nexports.configure = configure;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/console.js":"\"use strict\";\nvar layouts = require('../layouts')\n, consoleLog = console.log.bind(console);\n\nfunction consoleAppender (layout, timezoneOffset) {\n  layout = layout || layouts.colouredLayout;\n  return function(loggingEvent) {\n    consoleLog(layout(loggingEvent, timezoneOffset));\n  };\n}\n\nfunction configure(config) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  return consoleAppender(layout, config.timezoneOffset);\n}\n\nexports.appender = consoleAppender;\nexports.configure = configure;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/dateFile.js":"\"use strict\";\nvar streams = require('streamroller')\n, layouts = require('../layouts')\n, path = require('path')\n, os = require('os')\n, eol = os.EOL || '\\n'\n, openFiles = [];\n\n//close open files on process exit.\nprocess.on('exit', function() {\n  openFiles.forEach(function (file) {\n    file.end();\n  });\n});\n\n/**\n * File appender that rolls files according to a date pattern.\n * @filename base filename.\n * @pattern the format that will be added to the end of filename when rolling,\n *          also used to check when to roll files - defaults to '.yyyy-MM-dd'\n * @layout layout function for log messages - defaults to basicLayout\n * @timezoneOffset optional timezone offset in minutes - defaults to system local\n */\nfunction appender(filename, pattern, layout, options, timezoneOffset) {\n  layout = layout || layouts.basicLayout;\n\n  var logFile = new streams.DateRollingFileStream(\n    filename,\n    pattern,\n    options\n  );\n  openFiles.push(logFile);\n\n  return function(logEvent) {\n    logFile.write(layout(logEvent, timezoneOffset) + eol, \"utf8\");\n  };\n\n}\n\nfunction configure(config, options) {\n  var layout;\n\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n\n  if (!config.alwaysIncludePattern) {\n    config.alwaysIncludePattern = false;\n  }\n\n  if (options && options.cwd && !config.absolute) {\n    config.filename = path.join(options.cwd, config.filename);\n  }\n\n  return appender(\n    config.filename,\n    config.pattern,\n    layout,\n    config,\n    config.timezoneOffset\n  );\n}\n\nfunction shutdown(cb) {\n  var completed = 0;\n  var error;\n  var complete = function(err) {\n    error = error || err;\n    completed++;\n    if (completed >= openFiles.length) {\n      cb(error);\n    }\n  };\n  if (!openFiles.length) {\n    return cb();\n  }\n  openFiles.forEach(function(file) {\n    if (!file.write(eol, \"utf-8\")) {\n      file.once('drain', function() {\n        file.end(complete);\n      });\n    } else {\n      file.end(complete);\n    }\n  });\n}\n\nexports.appender = appender;\nexports.configure = configure;\nexports.shutdown = shutdown;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/file.js":"\"use strict\";\nvar debug = require('debug')('log4js:file')\n, layouts = require('../layouts')\n, path = require('path')\n, fs = require('fs')\n, streams = require('streamroller')\n, os = require('os')\n, eol = os.EOL || '\\n'\n, openFiles = []\n, levels = require('../levels');\n\n//close open files on process exit.\nprocess.on('exit', function() {\n  debug('Exit handler called.');\n  openFiles.forEach(function (file) {\n    file.end();\n  });\n});\n\n// On SIGHUP, close and reopen all files. This allows this appender to work with\n// logrotate. Note that if you are using logrotate, you should not set\n// `logSize`.\nprocess.on('SIGHUP', function() {\n  debug('SIGHUP handler called.');\n  openFiles.forEach(function(writer) {\n    writer.closeTheStream(writer.openTheStream.bind(writer));\n  });\n});\n\n/**\n * File Appender writing the logs to a text file. Supports rolling of logs by size.\n *\n * @param file file log messages will be written to\n * @param layout a function that takes a logevent and returns a string\n *   (defaults to basicLayout).\n * @param logSize - the maximum size (in bytes) for a log file,\n *   if not provided then logs won't be rotated.\n * @param numBackups - the number of log files to keep after logSize\n *   has been reached (default 5)\n * @param options - options to be passed to the underlying stream\n * @param timezoneOffset - optional timezone offset in minutes (default system local)\n */\nfunction fileAppender (file, layout, logSize, numBackups, options, timezoneOffset) {\n  file = path.normalize(file);\n  layout = layout || layouts.basicLayout;\n  numBackups = numBackups === undefined ? 5 : numBackups;\n  //there has to be at least one backup if logSize has been specified\n  numBackups = numBackups === 0 ? 1 : numBackups;\n\n  debug(\"Creating file appender (\",\n    file, \", \",\n    logSize, \", \",\n    numBackups, \", \",\n    options, \", \",\n    timezoneOffset, \")\"\n  );\n  var writer = openTheStream(file, logSize, numBackups, options);\n\n  // push file to the stack of open handlers\n  openFiles.push(writer);\n\n  return function(loggingEvent) {\n    writer.write(layout(loggingEvent, timezoneOffset) + eol, \"utf8\");\n  };\n\n}\n\nfunction openTheStream(file, fileSize, numFiles, options) {\n  var stream = new streams.RollingFileStream(\n    file,\n    fileSize,\n    numFiles,\n    options\n  );\n  stream.on(\"error\", function (err) {\n    console.error(\"log4js.fileAppender - Writing to file %s, error happened \", file, err);\n  });\n  return stream;\n}\n\n\nfunction configure(config, options) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n\n  if (options && options.cwd && !config.absolute) {\n    config.filename = path.join(options.cwd, config.filename);\n  }\n\n  return fileAppender(\n    config.filename,\n    layout,\n    config.maxLogSize,\n    config.backups,\n    config,\n    config.timezoneOffset\n  );\n}\n\nfunction shutdown(cb) {\n  var completed = 0;\n  var error;\n  var complete = function(err) {\n    error = error || err;\n    completed++;\n    if (completed >= openFiles.length) {\n      cb(error);\n    }\n  };\n  if (!openFiles.length) {\n    return cb();\n  }\n  openFiles.forEach(function(file) {\n    var stream = file;\n    if (!stream.write(eol, \"utf-8\")) {\n      stream.once('drain', function() {\n        stream.end(complete);\n      });\n    } else {\n      stream.end(complete);\n    }\n  });\n}\n\nexports.appender = fileAppender;\nexports.configure = configure;\nexports.shutdown = shutdown;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/fileSync.js":"\"use strict\";\nvar debug = require('debug')('log4js:fileSync')\n, layouts = require('../layouts')\n, path = require('path')\n, fs = require('fs')\n, os = require('os')\n, eol = os.EOL || '\\n'\n;\n\nfunction RollingFileSync (filename, size, backups, options) {\n  debug(\"In RollingFileStream\");\n\n  function throwErrorIfArgumentsAreNotValid() {\n    if (!filename || !size || size <= 0) {\n      throw new Error(\"You must specify a filename and file size\");\n    }\n  }\n\n  throwErrorIfArgumentsAreNotValid();\n\n  this.filename = filename;\n  this.size = size;\n  this.backups = backups || 1;\n  this.options = options || { encoding: 'utf8', mode: parseInt('0644', 8), flags: 'a' };\n  this.currentSize = 0;\n\n  function currentFileSize(file) {\n    var fileSize = 0;\n    try {\n      fileSize = fs.statSync(file).size;\n    } catch (e) {\n      // file does not exist\n      fs.appendFileSync(filename, '');\n    }\n    return fileSize;\n  }\n\n  this.currentSize = currentFileSize(this.filename);\n}\n\nRollingFileSync.prototype.shouldRoll = function() {\n  debug(\"should roll with current size %d, and max size %d\", this.currentSize, this.size);\n  return this.currentSize >= this.size;\n};\n\nRollingFileSync.prototype.roll = function(filename) {\n  var that = this,\n  nameMatcher = new RegExp('^' + path.basename(filename));\n\n  function justTheseFiles (item) {\n    return nameMatcher.test(item);\n  }\n\n  function index(filename_) {\n    return parseInt(filename_.substring((path.basename(filename) + '.').length), 10) || 0;\n  }\n\n  function byIndex(a, b) {\n    if (index(a) > index(b)) {\n      return 1;\n    } else if (index(a) < index(b) ) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n  function increaseFileIndex (fileToRename) {\n    var idx = index(fileToRename);\n    debug('Index of ' + fileToRename + ' is ' + idx);\n    if (idx < that.backups) {\n      //on windows, you can get a EEXIST error if you rename a file to an existing file\n      //so, we'll try to delete the file we're renaming to first\n      try {\n        fs.unlinkSync(filename + '.' + (idx+1));\n      } catch(e) {\n        //ignore err: if we could not delete, it's most likely that it doesn't exist\n      }\n\n      debug('Renaming ' + fileToRename + ' -> ' + filename + '.' + (idx+1));\n      fs.renameSync(path.join(path.dirname(filename), fileToRename), filename + '.' + (idx + 1));\n    }\n  }\n\n  function renameTheFiles() {\n    //roll the backups (rename file.n to file.n+1, where n <= numBackups)\n    debug(\"Renaming the old files\");\n\n    var files = fs.readdirSync(path.dirname(filename));\n    files.filter(justTheseFiles).sort(byIndex).reverse().forEach(increaseFileIndex);\n  }\n\n  debug(\"Rolling, rolling, rolling\");\n  renameTheFiles();\n};\n\nRollingFileSync.prototype.write = function(chunk, encoding) {\n  var that = this;\n\n\n  function writeTheChunk() {\n    debug(\"writing the chunk to the file\");\n    that.currentSize += chunk.length;\n    fs.appendFileSync(that.filename, chunk);\n  }\n\n  debug(\"in write\");\n\n\n  if (this.shouldRoll()) {\n    this.currentSize = 0;\n    this.roll(this.filename);\n  }\n\n  writeTheChunk();\n};\n\n\n/**\n * File Appender writing the logs to a text file. Supports rolling of logs by size.\n *\n * @param file file log messages will be written to\n * @param layout a function that takes a logevent and returns a string\n *   (defaults to basicLayout).\n * @param logSize - the maximum size (in bytes) for a log file,\n *   if not provided then logs won't be rotated.\n * @param numBackups - the number of log files to keep after logSize\n *   has been reached (default 5)\n * @param timezoneOffset - optional timezone offset in minutes\n *   (default system local)\n */\nfunction fileAppender (file, layout, logSize, numBackups, timezoneOffset) {\n  debug(\"fileSync appender created\");\n  var bytesWritten = 0;\n  file = path.normalize(file);\n  layout = layout || layouts.basicLayout;\n  numBackups = numBackups === undefined ? 5 : numBackups;\n  //there has to be at least one backup if logSize has been specified\n  numBackups = numBackups === 0 ? 1 : numBackups;\n\n  function openTheStream(file, fileSize, numFiles) {\n    var stream;\n\n    if (fileSize) {\n      stream = new RollingFileSync(\n        file,\n        fileSize,\n        numFiles\n      );\n    } else {\n      stream = (function(f) {\n        // create file if it doesn't exist\n        if (!fs.existsSync(f))\n            fs.appendFileSync(f, '');\n\n        return {\n            write: function(data) {\n                fs.appendFileSync(f, data);\n            }\n        };\n      })(file);\n    }\n\n    return stream;\n  }\n\n  var logFile = openTheStream(file, logSize, numBackups);\n\n  return function(loggingEvent) {\n    logFile.write(layout(loggingEvent, timezoneOffset) + eol);\n  };\n}\n\nfunction configure(config, options) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n\n  if (options && options.cwd && !config.absolute) {\n    config.filename = path.join(options.cwd, config.filename);\n  }\n\n  return fileAppender(\n    config.filename,\n    layout,\n    config.maxLogSize,\n    config.backups,\n    config.timezoneOffset\n  );\n}\n\nexports.appender = fileAppender;\nexports.configure = configure;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/gelf.js":"\"use strict\";\nvar zlib = require('zlib');\nvar layouts = require('../layouts');\nvar levels = require('../levels');\nvar dgram = require('dgram');\nvar util = require('util');\nvar debug = require('debug')('log4js:gelf');\n\nvar LOG_EMERG=0;    // system is unusable\nvar LOG_ALERT=1;    // action must be taken immediately\nvar LOG_CRIT=2;     // critical conditions\nvar LOG_ERR=3;      // error conditions\nvar LOG_ERROR=3;    // because people WILL typo\nvar LOG_WARNING=4;  // warning conditions\nvar LOG_NOTICE=5;   // normal, but significant, condition\nvar LOG_INFO=6;     // informational message\nvar LOG_DEBUG=7;    // debug-level message\n\nvar levelMapping = {};\nlevelMapping[levels.ALL] = LOG_DEBUG;\nlevelMapping[levels.TRACE] = LOG_DEBUG;\nlevelMapping[levels.DEBUG] = LOG_DEBUG;\nlevelMapping[levels.INFO] = LOG_INFO;\nlevelMapping[levels.WARN] = LOG_WARNING;\nlevelMapping[levels.ERROR] = LOG_ERR;\nlevelMapping[levels.FATAL] = LOG_CRIT;\n\nvar client;\n\n/**\n * GELF appender that supports sending UDP packets to a GELF compatible server such as Graylog\n *\n * @param layout a function that takes a logevent and returns a string (defaults to none).\n * @param host - host to which to send logs (default:localhost)\n * @param port - port at which to send logs to (default:12201)\n * @param hostname - hostname of the current host (default:os hostname)\n * @param facility - facility to log to (default:nodejs-server)\n */\n /* jshint maxstatements:21 */\nfunction gelfAppender (layout, host, port, hostname, facility) {\n  var config, customFields;\n  if (typeof(host) === 'object') {\n    config = host;\n    host = config.host;\n    port = config.port;\n    hostname = config.hostname;\n    facility = config.facility;\n    customFields = config.customFields;\n  }\n\n  host = host || 'localhost';\n  port = port || 12201;\n  hostname = hostname || require('os').hostname();\n  layout = layout || layouts.messagePassThroughLayout;\n\n  var defaultCustomFields = customFields || {};\n\n  if(facility) {\n    defaultCustomFields._facility = facility;\n  }\n\n  client = dgram.createSocket(\"udp4\");\n\n  process.on('exit', function() {\n    if (client) client.close();\n  });\n\n  /**\n   * Add custom fields (start with underscore )\n   * - if the first object passed to the logger contains 'GELF' field,\n   *   copy the underscore fields to the message\n   * @param loggingEvent\n   * @param msg\n   */\n  function addCustomFields(loggingEvent, msg){\n\n    /* append defaultCustomFields firsts */\n    Object.keys(defaultCustomFields).forEach(function(key) {\n      // skip _id field for graylog2, skip keys not starts with UNDERSCORE\n      if (key.match(/^_/) && key !== \"_id\") {\n        msg[key] = defaultCustomFields[key];\n      }\n    });\n\n    /* append custom fields per message */\n    var data = loggingEvent.data;\n    if (!Array.isArray(data) || data.length === 0) return;\n    var firstData = data[0];\n\n    if (!firstData.GELF) return; // identify with GELF field defined\n    // Remove the GELF key, some gelf supported logging systems drop the message with it\n    delete firstData.GELF;\n    Object.keys(firstData).forEach(function(key) {\n      // skip _id field for graylog2, skip keys not starts with UNDERSCORE\n      if (key.match(/^_/) || key !== \"_id\") {\n        msg[key] = firstData[key];\n      }\n    });\n\n    /* the custom field object should be removed, so it will not be looged by the later appenders */\n    loggingEvent.data.shift();\n  }\n\n  function preparePacket(loggingEvent) {\n    var msg = {};\n    addCustomFields(loggingEvent, msg);\n    msg.short_message = layout(loggingEvent);\n\n    msg.version=\"1.1\";\n    msg.timestamp = msg.timestamp || new Date().getTime() / 1000; // log should use millisecond\n    msg.host = hostname;\n    msg.level = levelMapping[loggingEvent.level || levels.DEBUG];\n    return msg;\n  }\n\n  function sendPacket(packet) {\n    client.send(packet, 0, packet.length, port, host, function(err) {\n      if (err) { console.error(err); }\n    });\n  }\n\n  return function(loggingEvent) {\n    var message = preparePacket(loggingEvent);\n    zlib.gzip(new Buffer(JSON.stringify(message)), function(err, packet) {\n      if (err) {\n        console.error(err.stack);\n      } else {\n        if (packet.length > 8192) {\n          debug(\"Message packet length (\" + packet.length + \") is larger than 8k. Not sending\");\n        } else {\n          sendPacket(packet);\n        }\n      }\n    });\n  };\n}\n\nfunction configure(config) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  return gelfAppender(layout, config);\n}\n\nfunction shutdown(cb) {\n  if (client) {\n    client.close(cb);\n    client = null;\n  }\n}\n\nexports.appender = gelfAppender;\nexports.configure = configure;\nexports.shutdown = shutdown;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/hipchat.js":"\"use strict\";\n\nvar hipchat = require('hipchat-notifier');\nvar layouts = require('../layouts');\n\nexports.name = 'hipchat';\nexports.appender  = hipchatAppender;\nexports.configure = hipchatConfigure;\n\n/**\n  @invoke as\n\n  log4js.configure({\n    \"appenders\": [\n      {\n        \"type\" : \"hipchat\",\n        \"hipchat_token\": \"< User token with Notification Privileges >\",\n        \"hipchat_room\": \"< Room ID or Name >\",\n        // optionl\n        \"hipchat_from\": \"[ additional from label ]\",\n        \"hipchat_notify\": \"[ notify boolean to bug people ]\",\n        \"hipchat_host\" : \"api.hipchat.com\"\n      }\n    ]\n  });\n\n  var logger = log4js.getLogger(\"hipchat\");\n  logger.warn(\"Test Warn message\");\n\n  @invoke\n */\n\nfunction hipchatNotifierResponseCallback(err, response, body){\n  if(err) {\n    throw err;\n  }\n}\n\nfunction hipchatAppender(config) {\n\n\tvar notifier = hipchat.make(config.hipchat_room, config.hipchat_token);\n\n  // @lint W074 This function's cyclomatic complexity is too high. (10)\n  return function(loggingEvent){\n\n    var notifierFn;\n\n    notifier.setRoom(config.hipchat_room);\n    notifier.setFrom(config.hipchat_from || '');\n    notifier.setNotify(config.hipchat_notify || false);\n\n    if(config.hipchat_host) {\n      notifier.setHost(config.hipchat_host);\n    }\n\n    switch (loggingEvent.level.toString()) {\n      case \"TRACE\":\n      case \"DEBUG\":\n        notifierFn = \"info\";\n        break;\n      case \"WARN\":\n        notifierFn = \"warning\";\n        break;\n      case \"ERROR\":\n      case \"FATAL\":\n        notifierFn = \"failure\";\n        break;\n      default:\n        notifierFn = \"success\";\n    }\n\n    // @TODO, re-work in timezoneOffset ?\n    var layoutMessage = config.layout(loggingEvent);\n\n    // dispatch hipchat api request, do not return anything\n    //  [overide hipchatNotifierResponseCallback]\n    notifier[notifierFn](layoutMessage, config.hipchat_response_callback ||\n      hipchatNotifierResponseCallback);\n  };\n}\n\nfunction hipchatConfigure(config) {\n\tvar layout;\n\n\tif (!config.layout) {\n\t\tconfig.layout = layouts.messagePassThroughLayout;\n\t}\n\n\treturn hipchatAppender(config, layout);\n}\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/logFacesAppender.js":"/**\n* logFaces appender sends JSON formatted log events to logFaces receivers.\n* There are two types of receivers supported - raw UDP sockets (for server side apps),\n* and HTTP (for client side apps). Depending on the usage, this appender\n* requires either of the two:\n*\n* For UDP require 'dgram', see 'https://nodejs.org/api/dgram.html'\n* For HTTP require 'axios', see 'https://www.npmjs.com/package/axios'\n*\n* Make sure your project have relevant dependancy installed before using this appender.\n*/\n\n\"use strict\";\nvar util = require('util');\nvar context = {};\n\nfunction datagram(config){\n   var sock = require('dgram').createSocket('udp4');\n   var host = config.remoteHost || \"127.0.0.1\";\n   var port = config.port || 55201;\n\n   return function(event){\n      var buff = new Buffer(JSON.stringify(event));\n      sock.send(buff, 0, buff.length, port, host, function(err, bytes) {\n         if(err){\n            console.error(\"log4js.logFacesAppender failed to %s:%d, error: %s\",\n                          host, port, err);\n         }\n      });\n   };\n}\n\nfunction servlet(config){\n   var axios = require('axios').create();\n   axios.defaults.baseURL = config.url;\n   axios.defaults.timeout = config.timeout || 5000;\n   axios.defaults.headers = {'Content-Type': 'application/json'};\n   axios.defaults.withCredentials = true;\n\n   return function(lfsEvent){\n      axios.post(\"\", lfsEvent)\n      .then(function(response){\n         if(response.status != 200){\n            console.error(\"log4js.logFacesAppender post to %s failed: %d\",\n                           config.url, response.status);\n         }\n      })\n      .catch(function(response){\n         console.error(\"log4js.logFacesAppender post to %s excepted: %s\",\n                          config.url, response.status);\n      });\n   };\n}\n\n/**\n* For UDP (node.js) use the following configuration params:\n*   {\n*      \"type\": \"logFacesAppender\",       // must be present for instantiation\n*      \"application\": \"LFS-TEST\",        // name of the application (domain)\n*      \"remoteHost\": \"127.0.0.1\",        // logFaces server address (hostname)\n*      \"port\": 55201                     // UDP receiver listening port\n*   }\n*\n* For HTTP (browsers or node.js) use the following configuration params:\n*   {\n*      \"type\": \"logFacesAppender\",       // must be present for instantiation\n*      \"application\": \"LFS-TEST\",        // name of the application (domain)\n*      \"url\": \"http://lfs-server/logs\",  // logFaces receiver servlet URL\n*   }\n*/\nfunction logFacesAppender(config) {\n   var send = config.send;\n   if(send === undefined){\n      send = (config.url === undefined) ? datagram(config) : servlet(config);\n   }\n\n   return function log(event) {\n      // convert to logFaces compact json format\n      var lfsEvent = {\n         a: config.application || \"\",   // application name\n         t: event.startTime.getTime(),  // time stamp\n         p: event.level.levelStr,       // level (priority)\n         g: event.categoryName,         // logger name\n         m: format(event.data)          // message text\n      };\n\n      // add context variables if exist\n      Object.keys(context).forEach(function(key) {\n         lfsEvent['p_' + key] = context[key];\n      });\n\n      // send to server\n      send(lfsEvent);\n   };\n}\n\nfunction configure(config) {\n   return logFacesAppender(config);\n}\n\nfunction setContext(key, value){\n   context[key] = value;\n}\n\nfunction format(logData) {\n  var data = Array.isArray(logData) ?\n               logData : Array.prototype.slice.call(arguments);\n  return util.format.apply(util, wrapErrorsWithInspect(data));\n}\n\nfunction wrapErrorsWithInspect(items) {\n  return items.map(function(item) {\n    if ((item instanceof Error) && item.stack) {\n      return { inspect: function() {\n          return util.format(item) + '\\n' + item.stack;\n       }};\n    } else {\n      return item;\n    }\n  });\n}\n\nexports.appender = logFacesAppender;\nexports.configure = configure;\nexports.setContext = setContext;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/loggly.js":"'use strict';\nvar layouts = require('../layouts')\n, loggly = require('loggly')\n, os = require('os')\n, passThrough = layouts.messagePassThroughLayout\n, openRequests = 0\n, shutdownCB;\n\nfunction isAnyObject(value) {\n\treturn value !== null && (typeof value === 'object' || typeof value === 'function');\n}\n\nfunction numKeys(o) {\n  var res = 0;\n  for (var k in o) {\n    if (o.hasOwnProperty(k)) res++;\n  }\n  return res;\n}\n\n/**\n * @param msg - array of args for logging.\n * @returns { deTaggedMsg: [], additionalTags: [] }\n */\nfunction processTags(msgListArgs) {\n  var msgList = (msgListArgs.length === 1 ? [msgListArgs[0]] : Array.apply(null, msgListArgs));\n\n  return msgList.reduce(function (accum, element, currentIndex, array) {\n    if (isAnyObject(element) && Array.isArray(element.tags) && numKeys(element) == 1) {\n      accum.additionalTags = accum.additionalTags.concat(element.tags);\n    } else {\n      accum.deTaggedData.push(element);\n    }\n    return accum;\n  }, { deTaggedData: [], additionalTags: [] });\n}\n\n/**\n * Loggly Appender. Sends logging events to Loggly using node-loggly, optionally adding tags.\n *\n * This appender will scan the msg from the logging event, and pull out any argument of the\n * shape `{ tags: [] }` so that it's possibleto add tags in a normal logging call.\n *\n * For example:\n *\n * logger.info({ tags: ['my-tag-1', 'my-tag-2'] }, 'Some message', someObj, ...)\n *\n * And then this appender will remove the tags param and append it to the config.tags.\n *\n * @param config object with loggly configuration data\n * {\n *   token: 'your-really-long-input-token',\n *   subdomain: 'your-subdomain',\n *   tags: ['loggly-tag1', 'loggly-tag2', .., 'loggly-tagn']\n * }\n * @param layout a function that takes a logevent and returns a string (defaults to objectLayout).\n */\nfunction logglyAppender(config, layout) {\n\tvar client = loggly.createClient(config);\n  if(!layout) layout = passThrough;\n\n  return function(loggingEvent) {\n    var result = processTags(loggingEvent.data);\n    var deTaggedData = result.deTaggedData;\n    var additionalTags = result.additionalTags;\n\n    // Replace the data property with the deTaggedData\n    loggingEvent.data = deTaggedData;\n\n    var msg = layout(loggingEvent);\n\n\t\topenRequests++;\n\n\t\tclient.log({\n\t\t\tmsg: msg,\n\t\t\tlevel: loggingEvent.level.levelStr,\n\t\t\tcategory: loggingEvent.categoryName,\n\t\t\thostname: os.hostname().toString(),\n\t\t}, additionalTags, function (error, result) {\n\t\t\tif (error) {\n\t\t\t\tconsole.error(\"log4js.logglyAppender - error occurred: \", error);\n\t\t\t}\n\n\t\t\topenRequests--;\n\n\t\t\tif (shutdownCB && openRequests === 0) {\n\t\t\t\tshutdownCB();\n\n\t\t\t\tshutdownCB = undefined;\n\t\t\t}\n\t\t});\n  };\n}\n\nfunction configure(config) {\n\tvar layout;\n\tif (config.layout) {\n\t\tlayout = layouts.layout(config.layout.type, config.layout);\n\t}\n\treturn logglyAppender(config, layout);\n}\n\nfunction shutdown (cb) {\n\tif (openRequests === 0) {\n\t\tcb();\n\t}\telse {\n\t\tshutdownCB = cb;\n\t}\n}\n\nexports.name      = 'loggly';\nexports.appender  = logglyAppender;\nexports.configure = configure;\nexports.shutdown  = shutdown;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/logLevelFilter.js":"\"use strict\";\nvar levels = require('../levels')\n, log4js = require('../log4js');\n\nfunction logLevelFilter (minLevelString, maxLevelString, appender) {\n  var minLevel = levels.toLevel(minLevelString);\n  var maxLevel = levels.toLevel(maxLevelString, levels.FATAL);\n  return function(logEvent) {\n      var eventLevel = logEvent.level;\n      if (eventLevel.isGreaterThanOrEqualTo(minLevel) && eventLevel.isLessThanOrEqualTo(maxLevel)) {\n      appender(logEvent);\n    }\n  };\n}\n\nfunction configure(config, options) {\n  log4js.loadAppender(config.appender.type);\n  var appender = log4js.appenderMakers[config.appender.type](config.appender, options);\n  return logLevelFilter(config.level, config.maxLevel, appender);\n}\n\nexports.appender = logLevelFilter;\nexports.configure = configure;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/logstashUDP.js":"\"use strict\";\nvar layouts = require('../layouts')\n, dgram = require('dgram')\n, util = require('util');\n\nfunction logstashUDP (config, layout) {\n  var udp = dgram.createSocket('udp4');\n  var type = config.logType ? config.logType : config.category;\n  layout = layout || layouts.dummyLayout;\n  if(!config.fields) {\n    config.fields = {};\n  }\n  return function log(loggingEvent) {\n\n    /*\n      https://gist.github.com/jordansissel/2996677\n      {\n        \"message\"    => \"hello world\",\n        \"@version\"   => \"1\",\n        \"@timestamp\" => \"2014-04-22T23:03:14.111Z\",\n        \"type\"       => \"stdin\",\n        \"host\"       => \"hello.local\"\n      }\n      @timestamp is the ISO8601 high-precision timestamp for the event.\n      @version is the version number of this json schema\n      Every other field is valid and fine.\n    */\n\n    if (loggingEvent.data.length > 1) {\n      var secondEvData = loggingEvent.data[1];\n      for (var k in secondEvData) {\n        config.fields[k] = secondEvData[k];\n      }\n    }\n    config.fields.level = loggingEvent.level.levelStr;\n    config.fields.category = loggingEvent.categoryName;\n\n    var logObject = {\n      \"@version\" : \"1\",\n      \"@timestamp\" : (new Date(loggingEvent.startTime)).toISOString(),\n      \"type\" : config.logType ? config.logType : config.category,\n      \"message\" : layout(loggingEvent),\n      \"fields\" : config.fields\n    };\n    sendLog(udp, config.host, config.port, logObject);\n  };\n}\n\nfunction sendLog(udp, host, port, logObject) {\n  var buffer = new Buffer(JSON.stringify(logObject));\n  udp.send(buffer, 0, buffer.length, port, host, function(err, bytes) {\n    if(err) {\n      console.error(\n        \"log4js.logstashUDP - %s:%p Error: %s\", host, port, util.inspect(err)\n      );\n    }\n  });\n}\n\nfunction configure(config) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  return logstashUDP(config, layout);\n}\n\nexports.appender = logstashUDP;\nexports.configure = configure;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/mailgun.js":"\"use strict\";\nvar layouts = require('../layouts');\nvar layout;\nvar config;\nvar mailgun;\n\nfunction mailgunAppender(_config, _layout) {\n\n    config = _config;\n    layout = _layout || layouts.basicLayout;\n\n    return function (loggingEvent) {\n\n        var data = {\n            from: _config.from,\n            to: _config.to,\n            subject: _config.subject,\n            text: layout(loggingEvent, config.timezoneOffset)\n        };\n\n        mailgun.messages().send(data, function (error, body) {\n            if (error !== null) console.error(\"log4js.mailgunAppender - Error happened\", error);\n        });\n    };\n}\n\nfunction configure(_config) {\n    config = _config;\n\n    if (_config.layout) {\n        layout = layouts.layout(_config.layout.type, _config.layout);\n    }\n\n    mailgun = require('mailgun-js')({\n        apiKey: _config.apikey,\n        domain: _config.domain\n    });\n\n    return mailgunAppender(_config, layout);\n}\n\nexports.appender = mailgunAppender;\nexports.configure = configure;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/multiprocess.js":"\"use strict\";\nvar log4js = require('../log4js')\n, debug = require('debug')('log4js:multiprocess')\n, net = require('net')\n, END_MSG = '__LOG4JS__'\n, servers = [];\n\n/**\n * Creates a server, listening on config.loggerPort, config.loggerHost.\n * Output goes to config.actualAppender (config.appender is used to\n * set up that appender).\n */\nfunction logServer(config) {\n\n  /**\n   * Takes a utf-8 string, returns an object with\n   * the correct log properties.\n   */\n  function deserializeLoggingEvent(clientSocket, msg) {\n    var loggingEvent;\n    try {\n      loggingEvent = JSON.parse(msg);\n      loggingEvent.startTime = new Date(loggingEvent.startTime);\n      loggingEvent.level = log4js.levels.toLevel(loggingEvent.level.levelStr);\n    } catch (e) {\n      // JSON.parse failed, just log the contents probably a naughty.\n      loggingEvent = {\n        startTime: new Date(),\n        categoryName: 'log4js',\n        level: log4js.levels.ERROR,\n        data: [ 'Unable to parse log:', msg ]\n      };\n    }\n\n    loggingEvent.remoteAddress = clientSocket.remoteAddress;\n    loggingEvent.remotePort = clientSocket.remotePort;\n\n    return loggingEvent;\n  }\n\n  var actualAppender = config.actualAppender,\n  server = net.createServer(function serverCreated(clientSocket) {\n    clientSocket.setEncoding('utf8');\n    var logMessage = '';\n\n    function logTheMessage(msg) {\n      if (logMessage.length > 0) {\n        actualAppender(deserializeLoggingEvent(clientSocket, msg));\n      }\n    }\n\n    function chunkReceived(chunk) {\n      var event;\n      logMessage += chunk || '';\n      if (logMessage.indexOf(END_MSG) > -1) {\n        event = logMessage.substring(0, logMessage.indexOf(END_MSG));\n        logTheMessage(event);\n        logMessage = logMessage.substring(event.length + END_MSG.length) || '';\n        //check for more, maybe it was a big chunk\n        chunkReceived();\n      }\n    }\n\n    clientSocket.on('data', chunkReceived);\n    clientSocket.on('end', chunkReceived);\n  });\n\n  server.listen(config.loggerPort || 5000, config.loggerHost || 'localhost', function() {\n    servers.push(server);\n    //allow the process to exit, if this is the only socket active\n    server.unref();\n  });\n\n  return actualAppender;\n}\n\nfunction workerAppender(config) {\n  var canWrite = false,\n  buffer = [],\n  socket;\n\n  createSocket();\n\n  function createSocket() {\n    socket = net.createConnection(config.loggerPort || 5000, config.loggerHost || 'localhost');\n    socket.on('connect', function() {\n      emptyBuffer();\n      canWrite = true;\n    });\n    socket.on('timeout', socket.end.bind(socket));\n    //don't bother listening for 'error', 'close' gets called after that anyway\n    socket.on('close', createSocket);\n  }\n\n  function emptyBuffer() {\n    var evt;\n    while ((evt = buffer.shift())) {\n      write(evt);\n    }\n  }\n\n  function write(loggingEvent) {\n\t// JSON.stringify(new Error('test')) returns {}, which is not really useful for us.\n\t// The following allows us to serialize errors correctly.\n  // Validate that we really are in this case\n\tif (loggingEvent && loggingEvent.stack && JSON.stringify(loggingEvent) === '{}') {\n\t\tloggingEvent = {stack : loggingEvent.stack};\n\t}\n    socket.write(JSON.stringify(loggingEvent), 'utf8');\n    socket.write(END_MSG, 'utf8');\n  }\n\n  return function log(loggingEvent) {\n    if (canWrite) {\n      write(loggingEvent);\n    } else {\n      buffer.push(loggingEvent);\n    }\n  };\n}\n\nfunction createAppender(config) {\n  if (config.mode === 'master') {\n    return logServer(config);\n  } else {\n    return workerAppender(config);\n  }\n}\n\nfunction configure(config, options) {\n  var actualAppender;\n  if (config.appender && config.mode === 'master') {\n    log4js.loadAppender(config.appender.type);\n    actualAppender = log4js.appenderMakers[config.appender.type](config.appender, options);\n    config.actualAppender = actualAppender;\n  }\n  return createAppender(config);\n}\n\nfunction shutdown(done) {\n  var toBeClosed = servers.length;\n  debug(\"multiprocess shutdown with \", toBeClosed, \" servers to close.\");\n  servers.forEach(function(server) {\n    server.close(function() {\n      debug(\"server closed.\");\n      toBeClosed--;\n      if (toBeClosed < 1) {\n        debug(\"all servers closed.\");\n        done();\n      }\n    });\n  });\n}\n\nexports.appender = createAppender;\nexports.configure = configure;\nexports.shutdown = shutdown;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/slack.js":"\"use strict\";\nvar Slack = require('slack-node');\nvar layouts = require('../layouts');\nvar layout;\n\nvar slack, config;\n\nfunction slackAppender(_config, _layout) {\n\n    layout = _layout || layouts.basicLayout;\n\n    return function (loggingEvent) {\n\n        var data = {\n            channel_id: _config.channel_id,\n            text: layout(loggingEvent, _config.timezoneOffset),\n            icon_url: _config.icon_url,\n            username: _config.username\n        };\n\n        slack.api('chat.postMessage', {\n            channel: data.channel_id,\n            text: data.text,\n            icon_url: data.icon_url,username: data.username}, function (err, response) {\n            if (err) { throw err; }\n        });\n\n    };\n}\n\nfunction configure(_config) {\n\n    if (_config.layout) {\n        layout = layouts.layout(_config.layout.type, _config.layout);\n    }\n\n    slack = new Slack(_config.token);\n\n    return slackAppender(_config, layout);\n}\n\nexports.name      = 'slack';\nexports.appender = slackAppender;\nexports.configure = configure;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/smtp.js":"\"use strict\";\n\nvar layouts = require(\"../layouts\");\nvar mailer = require(\"nodemailer\");\nvar os = require('os');\n\nvar logEventBuffer = [];\nvar subjectLayout;\nvar layout;\n\nvar unsentCount = 0;\nvar shutdownTimeout;\n\nvar sendInterval;\nvar sendTimer;\n\nvar config;\n\nfunction sendBuffer() {\n    if (logEventBuffer.length > 0) {\n\n        var transportOpts = getTransportOptions(config);\n        var transport = mailer.createTransport(transportOpts);\n        var firstEvent = logEventBuffer[0];\n        var body = \"\";\n        var count = logEventBuffer.length;\n        while (logEventBuffer.length > 0) {\n            body += layout(logEventBuffer.shift(), config.timezoneOffset) + \"\\n\";\n        }\n\n        var msg = {\n            to: config.recipients,\n            subject: config.subject || subjectLayout(firstEvent),\n            headers: {\"Hostname\": os.hostname()}\n        };\n\n        if (true === config.attachment.enable) {\n            msg[config.html ? \"html\" : \"text\"] = config.attachment.message;\n            msg.attachments = [\n                {\n                    filename: config.attachment.filename,\n                    contentType: 'text/x-log',\n                    content: body\n                }\n            ];\n        } else {\n            msg[config.html ? \"html\" : \"text\"] = body;\n        }\n\n        if (config.sender) {\n            msg.from = config.sender;\n        }\n        transport.sendMail(msg, function (error) {\n            if (error) {\n                console.error(\"log4js.smtpAppender - Error happened\", error);\n            }\n            transport.close();\n            unsentCount -= count;\n        });\n    }\n}\n\nfunction getTransportOptions() {\n    var transportOpts = null;\n    if (config.SMTP) {\n        transportOpts = config.SMTP;\n    } else if (config.transport) {\n        var plugin = config.transport.plugin || 'smtp';\n        var transportModule = 'nodemailer-' + plugin + '-transport';\n        var transporter = require(transportModule);\n        transportOpts = transporter(config.transport.options);\n    }\n\n    return transportOpts;\n}\n\nfunction scheduleSend() {\n    if (!sendTimer) {\n        sendTimer = setTimeout(function () {\n            sendTimer = null;\n            sendBuffer();\n        }, sendInterval);\n    }\n}\n\n/**\n * SMTP Appender. Sends logging events using SMTP protocol. \n * It can either send an email on each event or group several \n * logging events gathered during specified interval.\n *\n * @param _config appender configuration data\n *    config.sendInterval time between log emails (in seconds), if 0\n *    then every event sends an email\n *    config.shutdownTimeout time to give up remaining emails (in seconds; defaults to 5).\n * @param _layout a function that takes a logevent and returns a string (defaults to basicLayout).\n */\nfunction smtpAppender(_config, _layout) {\n    config = _config;\n\n    if (!config.attachment) {\n        config.attachment = {};\n    }\n\n    config.attachment.enable = !!config.attachment.enable;\n    config.attachment.message = config.attachment.message || \"See logs as attachment\";\n    config.attachment.filename = config.attachment.filename || \"default.log\";\n    layout = _layout || layouts.basicLayout;\n    subjectLayout = layouts.messagePassThroughLayout;\n    sendInterval = config.sendInterval * 1000 || 0;\n\n    shutdownTimeout = ('shutdownTimeout' in config ? config.shutdownTimeout : 5) * 1000;\n\n    return function (loggingEvent) {\n        unsentCount++;\n        logEventBuffer.push(loggingEvent);\n        if (sendInterval > 0) {\n            scheduleSend();\n        } else {\n            sendBuffer();\n        }\n    };\n}\n\nfunction configure(_config) {\n    config = _config;\n    if (_config.layout) {\n        layout = layouts.layout(_config.layout.type, _config.layout);\n    }\n    return smtpAppender(_config, layout);\n}\n\nfunction shutdown(cb) {\n    if (shutdownTimeout > 0) {\n        setTimeout(function () {\n            if (sendTimer)\n                clearTimeout(sendTimer);\n            sendBuffer();\n        }, shutdownTimeout);\n    }\n    (function checkDone() {\n      if (unsentCount > 0) {\n        setTimeout(checkDone, 100);\n      } else {\n        cb();\n      }\n    })();\n}\n\nexports.name = \"smtp\";\nexports.appender = smtpAppender;\nexports.configure = configure;\nexports.shutdown = shutdown;\n","/home/travis/build/npmtest/node-npmtest-log4js/node_modules/log4js/lib/appenders/stderr.js":"\"use strict\";\n\nvar layouts = require('../layouts');\n\nfunction stderrAppender(layout, timezoneOffset) {\n  layout = layout || layouts.colouredLayout;\n  return function(loggingEvent) {\n    process.stderr.write(layout(loggingEvent, timezoneOffset) + '\\n');\n  };\n}\n\nfunction configure(config) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  return stderrAppender(layout, config.timezoneOffset);\n}\n\nexports.appender = stderrAppender;\nexports.configure = configure;\n"}